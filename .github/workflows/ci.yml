name: CI

on:
  pull_request:
  push:
    branches: [ai-linking-service]

jobs:
  build-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: dist/

  build-functions:
    runs-on: ubuntu-latest
    needs: build-node
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: cd stackscribe-functions && npm ci && npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: functions-build
          path: stackscribe-functions/dist/

  build-desktop:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bundles: deb,appimage
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            bundles: nsis,msi
          - platform: macos-latest
            target: x86_64-apple-darwin
            bundles: app,dmg
          - platform: macos-latest
            target: aarch64-apple-darwin
            bundles: app,dmg

    runs-on: ${{ matrix.platform }}
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Set up Rust toolchain
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install Linux dependencies (Ubuntu only)
      - name: Install Linux build dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      # Install frontend dependencies
      - run: npm ci

      # Build Tauri desktop app
      - uses: tauri-apps/tauri-action@v0
        with:
          tauriScript: npm run tauri
          args: "--target ${{ matrix.target }} --bundles ${{ matrix.bundles }}"

  build-android:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Set up Java for Android builds
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Set up Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # Install NDK and set NDK_HOME
      - name: Setup Android NDK
        run: |
          echo "Installing Android NDK..."
          sdkmanager "ndk;26.3.11579264"
          echo "NDK_HOME=$ANDROID_HOME/ndk/26.3.11579264" >> $GITHUB_ENV

      # Install OpenSSL for Android cross-compilation
      - name: Setup OpenSSL for Android
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
          
          # Set up environment variables for Android OpenSSL cross-compilation
          echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      # Set up Rust with Android targets
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      # Install frontend dependencies
      - run: npm ci

      # Build Android APK
      - name: Build Android APK
        run: npm run tauri android build

  deploy-azure-ai-service:
    runs-on: ubuntu-latest
    needs: [build-node]
    if: github.ref == 'refs/heads/ai-linking-service' || github.ref == 'refs/heads/main'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up Azure CLI
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Azure Container Registry
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./stackscribe-ai-service
          file: ./stackscribe-ai-service/Dockerfile
          push: true
          tags: |
            ${{ secrets.AZURE_CONTAINER_REGISTRY }}/stackscribe-ai:${{ github.sha }}
            ${{ secrets.AZURE_CONTAINER_REGISTRY }}/stackscribe-ai:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Update Container App
      - name: Update Container App
        run: |
          ENV_NAME=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
          RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
          CONTAINER_APP_NAME="stackscribe-ai-service-${ENV_NAME}"
          IMAGE_NAME="${{ secrets.AZURE_CONTAINER_REGISTRY }}/stackscribe-ai:${{ github.sha }}"
          
          az containerapp update \
            --name "${CONTAINER_APP_NAME}" \
            --resource-group "${RESOURCE_GROUP}" \
            --image "${IMAGE_NAME}" \
            --revision-suffix "${{ github.sha }}"

      # Run health check
      - name: Health check
        run: |
          ENV_NAME=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
          RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
          CONTAINER_APP_NAME="stackscribe-ai-service-${ENV_NAME}"
          
          # Get the app URL
          APP_URL=$(az containerapp show \
            --name "${CONTAINER_APP_NAME}" \
            --resource-group "${RESOURCE_GROUP}" \
            --query 'properties.configuration.ingress.fqdn' \
            --output tsv)
          
          # Wait for deployment to complete
          sleep 30
          
          # Test health endpoint
          curl -f "https://${APP_URL}/health" || exit 1
          echo "Health check passed for https://${APP_URL}/health"
